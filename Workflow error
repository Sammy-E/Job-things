const hubspot = require("@hubspot/api-client");
exports.main = async (event) => {
  const hubspotClient = new hubspot.Client({ accessToken: process.env.JDSToken });
  
// Déclaration des variables
  const dealId = event.object.objectId;
  const contactId = ""
  let listeDealId = [];
  const newDeal = "Transaction Nouvelle";
  const reouvertDeal = "Transaction Réouverte";
  let listeCreationDate = [];
  let listeDealType = [];
  let listeTeamId = [];
  var lastNew = "";
  var existe = "Non";
  
// Corps du code
  try {    
        const getAssoContact = await hubspotClient.crm.deals.associationsApi.getAll(dealId, "contact"); 
    	

   // const getContact = await hubspotClient.crm.contacts.basicApi.getById(getAssoContact.results[0].toObjectId, ["lead_medecin_externe"]);

    //Récupére sous format d'une liste les IDs des deals
    let getDeals = await hubspotClient.crm.contacts.associationsApi.getAll(getAssoContact.body.results[0].id, "deal"); 
    getDeals = getDeals.body
    for(let d=0; d<getDeals.results.length; d++){
        listeDealId.push(getDeals.results[d].id)
      } 
    console.log(listeDealId);
    console.log(listeDealId.length);
    
    // Si 1 seul deal
    if(listeDealId.length == 1) {
                  console.log("un seul deal")

      const getDealType = await hubspotClient.crm.deals.basicApi.getById(listeDealId[0], ["type_de_transaction_medecin"]);
      //console.log(getDealType.properties.type_de_transaction_medecin);
      
      let properties = {
        type_de_transaction_medecin: newDeal,
      };
      let SimplePublicObjectInput = { properties };
      const updateDealType = await hubspotClient.crm.deals.basicApi.update(listeDealId[0], SimplePublicObjectInput);
    }
    
    // Si plusieurs deal
    if(listeDealId.length > 1) {
      console.log("plusieur deal oui")
      for(let t = 0 ; t < listeDealId.length ; t++){
        let getDealInfos = await hubspotClient.crm.deals.basicApi.getById(listeDealId[t], ["type_de_transaction_medecin","createdate","hubspot_team_id"]);
        getDealInfos = getDealInfos.body
        listeCreationDate.push(getDealInfos.properties.createdate);
        listeDealType.push(getDealInfos.properties.type_de_transaction_medecin);
        listeTeamId.push(getDealInfos.properties.hubspot_team_id)
        } 
      console.log(listeCreationDate);
      console.log(listeDealType);
      
      
      
      for(let y = 0 ; y < listeDealType.length ; y++) {
        if(listeDealType[y] == "Transaction Nouvelle" && (listeTeamId[y] != "6191155" || listeTeamId[y] !="36448055")) {
          existe = "Oui";
        }
      }
    
    // Si plusieurs et aucune nouvelle transaction  
    if(existe != "Oui") {
            console.log("plusieur aucune nouvelle TR")

      lastNew = listeDealId[0];
      for(let t = 1 ; t < listeCreationDate.length ; t++) {
        if(listeCreationDate[t] > listeCreationDate[t-1]) {
          lastNew = listeDealId[t];
          console.log(lastNew);
        }
      }
      let properties = {
        type_de_transaction_medecin: newDeal,
      };
      let SimplePublicObjectInput2 = { properties };
      const updateDealType2 = await hubspotClient.crm.deals.basicApi.update(dealId, SimplePublicObjectInput2);
    }
    // Si plusieurs et déjà une nouvelle transaction
    else {
                  console.log("plusieur déjà nouvelle TR")

      lastNew = listeDealId[0];
      for(let t = 1 ; t < listeCreationDate.length ; t++) {
        if(listeCreationDate[t] > listeCreationDate[t-1]) {
          lastNew = listeDealId[t];
          console.log("ici: ",lastNew);
        }
      }
      let properties = {
        type_de_transaction_medecin: reouvertDeal,
      };
      let SimplePublicObjectInput3 = { properties };
      const updateDealType3 = await hubspotClient.crm.deals.basicApi.update(dealId, SimplePublicObjectInput3);
    }
      
    }
 
    
  } catch (err) {
    console.error(err);
    throw err;
  }
  
};
